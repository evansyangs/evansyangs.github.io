(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{487:function(s,a,t){"use strict";t.r(a);var n=t(15),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"_1-继承的概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-继承的概念"}},[s._v("#")]),s._v(" 1. 继承的概念")]),s._v(" "),t("p",[s._v("继承是类与类的一种关系，是一种“is a”的关系。\n注：Java中的继承是单继承\n继承的好处：子类拥有父类的所有属性和方法（private修饰的无效）、实现代码的复用")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" 子类　"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" 父类\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Dog")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Animal")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h2",{attrs:{id:"_2-方法的重写"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-方法的重写"}},[s._v("#")]),s._v(" 2. 方法的重写")]),s._v(" "),t("p",[s._v("(1). 如果子类对继承父类的方法不满意，是可以重写父类继承的方法的，当调用方法时会优先调用子类的方法。\n(2). 语法规则：返回值类型、方法名、参数类型及个数都要与父类继承的方法相同，才叫方法的重写。")]),s._v(" "),t("h2",{attrs:{id:"_3-继承的初始化顺序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-继承的初始化顺序"}},[s._v("#")]),s._v(" 3. 继承的初始化顺序")]),s._v(" "),t("p",[s._v("(1). 初始化父类再初始化子类\n(2). 先执行初始化对象中属性，再执行构造方法中的初始化")]),s._v(" "),t("h2",{attrs:{id:"_4-java中的final的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-java中的final的使用"}},[s._v("#")]),s._v(" 4. Java中的final的使用")]),s._v(" "),t("p",[s._v("(1). final关键字\n使用final关键字做标识有“最终的”含义\n(2). final可以修饰类、方法、属性和变量\nfinal修饰类，则该类不允许被继承\nfinal修饰方法，则该方法不允许被覆盖（重写）\nfinal修饰属性，则该类的属性不会进行隐式的初始化（类的初始化属性必须有值）或在构造方法中赋值（但只能选其一）\nfinal修饰变量，则该变量的值只能赋一次值，即变为常量")]),s._v(" "),t("h2",{attrs:{id:"_5-java中的super的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-java中的super的使用"}},[s._v("#")]),s._v(" 5. Java中的super的使用")]),s._v(" "),t("p",[s._v("(1). super关键字：\n在对象的内部使用，可以表示父类对象。\n访问父类的属性：super.age\n访问父类的方法：super.eat()\n(2). super的应用：\n子类的构造的过程当中必须调用其父类的构造方法。\n如果子类的构造方法中没有显式调用父类的构造方法，则系统默认调用父类无参的构造方法。\n如果显式的调用构造方法，必须在子类的构造方法的第一行。\n如果子类构造方法中既没有显式调用父类的构造方法，而父类又没有无参的构造方法，则编译出错。")]),s._v(" "),t("h2",{attrs:{id:"_6-java中的object类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-java中的object类"}},[s._v("#")]),s._v(" 6. Java中的Object类")]),s._v(" "),t("ul",[t("li",[s._v("Object类是所有类的父类，如果一个类没有使用extends关键字明确标识继承另外一个类，那么这个类默认继承Object类。")]),s._v(" "),t("li",[s._v("Object类中的方法，适合所有子类。\n(1). toString()方法：在Object类里面定义toString()方法时返回的对象的哈希code码（对象地址字符串），可以通过重写toString()方法表示出对象的属性")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Dog [age="')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"]"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("(2). equals()方法：比较的是对象的"),t("strong",[s._v("引用")]),s._v("是否指向同一块内存地址。"),t("code",[s._v("Dog dog = new Dog()")]),s._v("，一般情况下比较两个对象时比较它的值是否一致，所以要进行重写。"),t("code",[s._v("obj.getClass()")]),s._v("类对象，"),t("code",[s._v("obj")]),s._v("类的对象。")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("equals")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\t\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\t\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\t\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Dog")]),s._v(" other "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Dog")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" other"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\t\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("h2",{attrs:{id:"多态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多态"}},[s._v("#")]),s._v(" 多态")]),s._v(" "),t("h2",{attrs:{id:"_1-多态类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-多态类型"}},[s._v("#")]),s._v(" 1. 多态类型")]),s._v(" "),t("p",[s._v("(1). 引用多态：父类的引用可以指向本类的对象，父类的引用可以指向子类的对象\n(2). 方法多态：创建本类对象时，调用的方法为本类方法，创建子类对象时，调用的方法为子类重写的方法或者继承的方法")]),s._v(" "),t("h2",{attrs:{id:"_2-多态中的引用类型转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-多态中的引用类型转换"}},[s._v("#")]),s._v(" 2. 多态中的引用类型转换")]),s._v(" "),t("p",[s._v("(1). 向上类型转换（隐式／自动类型转换），是小类型到大类型的转换\n(2). 向下类型转换（强制类型转换），是大类型到小类型\n(3). instanceof运算符，来解决引用对象的类型，避免类型转换的安全性问题")]),s._v(" "),t("h2",{attrs:{id:"_3-java中的抽象类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-java中的抽象类"}},[s._v("#")]),s._v(" 3. Java中的抽象类")]),s._v(" "),t("p",[s._v("(1). 语法定义：抽象类前使用"),t("code",[s._v("abstract")]),s._v("关键字修饰，则该类为抽象类。\n(2). 应用：a.在某些情况下，某个父类只是知道其子类应该包含怎样的方法，但无法准确知道这些子类如何实现这些方法。b.从多个具有相同特征的类中抽象出一个抽象类，以这个抽象类作为子类的模板，从而避免了子类设计的随意性。\n(3). 作用：限制规定子类必须实现某些方法，但不关注实现细节。\n(4). 使用规则：a.abstract定义抽象类 b.abstract定义抽象方法，只有声明，不需要实现 c.包含抽象方法的类是抽象类　d.抽象类中可以包含普通方法，也可以没有抽象方法　e.抽象类不能直接创建，可以定义引用变量")]),s._v(" "),t("h2",{attrs:{id:"_4-接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-接口"}},[s._v("#")]),s._v(" 4. 接口")]),s._v(" "),t("p",[s._v("(1). 接口概念：接口可以理解为一种特殊的类，由全局常量和公共的抽象方法所组成。类是一种具体实现体，而接口定义了某一批类所需要遵守的"),t("strong",[s._v("规范")]),s._v("，接口不关心这些类的内部数据，也不关心这些类里方法的实现细节，它只规定这些类里必须提供某些方法。")]),s._v(" "),t("p",[s._v("(2). 接口定义：和类定义不同，定义接口不再使用class关键字，而是使用interface关键字。")]),s._v(" "),t("p",[s._v("3). 接口语法：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("修饰符"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" 接口名 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" 父接口"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("父接口"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    零个到多个常量定义"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n    零个到多个抽象方法的定义"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("ul",[t("li",[s._v("[ ]指可选项")]),s._v(" "),t("li",[s._v("接口就是用来被继承、被实现的，修饰符一般建议用"),t("code",[s._v("public")]),s._v("\n**注意：**不能使用"),t("code",[s._v("private")]),s._v("和"),t("code",[s._v("protected")]),s._v("修饰接口")])]),s._v(" "),t("p",[s._v("(4). 定义补充：\n常量：接口中的属性是常量，即使定义时不添加"),t("code",[s._v("public static final")]),s._v("修饰符，系统也会自动加上\n方法：接口中的方法只能是抽象方法，总是使用，即使定义时不添加"),t("code",[s._v("public abstract")]),s._v("修饰符，系统也会自动加上。")]),s._v(" "),t("p",[s._v("(5). 使用接口：")]),s._v(" "),t("ul",[t("li",[s._v("一个类可以实现一个或多个接口，实现接口使用"),t("code",[s._v("implements")]),s._v("关键字。Java中一个类只能继承一个父类，是不够灵活的，通过实现多个接口可以做补充。")]),s._v(" "),t("li",[s._v("继承父类实现接口的语法为：")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("修饰符"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v("　类名　"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v("　父类 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" 接口"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("接口"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    类体部分"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//如果继承了抽象类，需要实现继承的抽象方法；要实现接口中的抽象方法。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("ul",[t("li",[s._v("如果要继承父类，继承父类必须在实现接口之前。")])]),s._v(" "),t("p",[s._v("(6). 匿名内部类")]),s._v(" "),t("ul",[t("li",[s._v("接口在使用过程当中，还经常与匿名内部类配合使用，匿名内部类就是没有名字的内部类，多用于关注实现而不关注实现类的名称。")]),s._v(" "),t("li",[s._v("语法格式")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Interface")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Interface")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("method")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"匿名内部类实现接口的方式"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h2",{attrs:{id:"uml简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#uml简介"}},[s._v("#")]),s._v(" UML简介")]),s._v(" "),t("ol",[t("li",[s._v("UML概念\nUnified Modeling Language(UML)又称统一建模语言或标准建模语言，是一个支持模型化和软件系统开发的图形化语言，为软件开发的所有阶段提供模型化和可视化支持。")]),s._v(" "),t("li",[s._v("常用UML图\n用例图：能够以可视化的方式，表达系统如何满足所收集的业务规则，以及特定的用户需求等信息。\n序列图：用于按照交互发生的一系列顺序，显示对象之间的这些交互。\n类图：UML类图、业务逻辑和所有支持结构一同被用于定义全部的代码结构。")]),s._v(" "),t("li",[s._v("UML建模工具\nVisio、Rational Rose、PowerDesign三种建模工具应用最广")])]),s._v(" "),t("h2",{attrs:{id:"感谢阅读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#感谢阅读"}},[s._v("#")]),s._v(" 感谢阅读！")])])}),[],!1,null,null,null);a.default=e.exports}}]);