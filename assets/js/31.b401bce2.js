(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{491:function(t,a,e){"use strict";e.r(a);var l=e(15),i=Object(l.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"_1-java中的包装类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-java中的包装类"}},[t._v("#")]),t._v(" 1. Java中的包装类")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("基本数据类型是不具备对象的特性的，比如基本类型不能调用方法、功能简单，为了让基本数据类型也具备对象的特性，Java为每个基本数据类型都提供了一个包装类，这样我们就可以像操作对象那样来操作基本数据类型。")])]),t._v(" "),e("li",[e("p",[t._v("基本类型和包装类之间的对应关系：\n"),e("center",[e("img",{attrs:{src:"https://i.loli.net/2020/07/04/2ZdusY6oSewXJcj.jpg",width:"60%",height:"40%",alt:"convolutions"}})])],1)]),t._v(" "),e("li",[e("p",[t._v("包装类主要提供了两大类方法：")])])]),t._v(" "),e("ol",[e("li",[t._v("将本类型和其他基本类型进行转换的方法")]),t._v(" "),e("li",[t._v("将字符串和本类型及包装类互相转换的方法")])]),t._v(" "),e("h2",{attrs:{id:"_2-java中基本类型和包装类之间的转换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-java中基本类型和包装类之间的转换"}},[t._v("#")]),t._v(" 2. Java中基本类型和包装类之间的转换")]),t._v(" "),e("ul",[e("li",[t._v("在 JDK1.5 引入自动装箱和拆箱的机制后，包装类和基本类型之间的转换就更加轻松便利了。")])]),t._v(" "),e("ol",[e("li",[t._v("装箱：把基本类型转换成包装类，使其具有对象的性质，又可分为手动装箱和自动装箱")]),t._v(" "),e("li",[t._v("拆箱：和装箱相反，把包装类对象转换成基本类型的值，又可分为手动拆箱和自动拆箱")])]),t._v(" "),e("h2",{attrs:{id:"_3-java中基本类型和字符串之间的转换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-java中基本类型和字符串之间的转换"}},[t._v("#")]),t._v(" 3. Java中基本类型和字符串之间的转换")]),t._v(" "),e("ul",[e("li",[t._v("基本类型转换为字符串有三种方法：")])]),t._v(" "),e("ol",[e("li",[t._v("使用包装类的 toString() 方法")]),t._v(" "),e("li",[t._v("使用String类的 valueOf() 方法")]),t._v(" "),e("li",[t._v("用一个空字符串加上基本类型，得到的就是基本类型数据对应的字符串")])]),t._v(" "),e("ul",[e("li",[t._v("将字符串转换成基本类型有两种方法：")])]),t._v(" "),e("ol",[e("li",[t._v("调用包装类的 parseXxx 静态方法")]),t._v(" "),e("li",[t._v("调用包装类的valueOf()方法转换为基本类型的包装类，会自动拆箱")])]),t._v(" "),e("h2",{attrs:{id:"_4-使用data和simpledateformat类表示时间"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-使用data和simpledateformat类表示时间"}},[t._v("#")]),t._v(" 4. 使用Data和SimpleDateFormat类表示时间")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("在程序开发中，经常需要处理日期和时间的相关数据，此时我们可以使用java.util包中的Date类。这个类最主要的作用就是获取当前时间：\n"),e("center",[e("img",{attrs:{src:"https://i.loli.net/2020/07/04/8uA9CVnYGRvTlw2.jpg",width:"80%",height:"40%",alt:"convolutions"}})])],1)]),t._v(" "),e("li",[e("p",[t._v("使用 Date 类的默认无参构造方法创建出的对象就代表当前时间，我们可以直接输出 Date 对象显示当前的时间：\n"),e("center",[e("img",{attrs:{src:"https://i.loli.net/2020/07/04/YM4A5tSXK8nfJIo.jpg",width:"50%",height:"40%",alt:"convolutions"}})])],1)]),t._v(" "),e("li",[e("p",[t._v("其中， Wed 代表 Wednesday (星期三)， Jun 代表 June (六月)， 11 代表 11 号， CST 代表 China Standard Time (中国标准时间，也就是北京时间，东八区)。")])]),t._v(" "),e("li",[e("p",[t._v("从上面的输出结果中，我们发现，默认的时间格式不是很友好，与我们日常看到的日期格式不太一样，如果想要按指定的格式进行显示，如 2014-06-11 09:22:30 ，那该怎么做呢？")])]),t._v(" "),e("li",[e("p",[t._v("此时就到了 java.text 包中的 SimpleDateFormat 类大显身手的时候了！！可以使用 SimpleDateFormat 来对日期时间进行格式化，如可以将日期转换为指定格式的文本，也可将文本转换为日期。")])])]),t._v(" "),e("ol",[e("li",[t._v("使用 format() 方法将日期转换为指定格式的文本\n"),e("center",[e("img",{attrs:{src:"https://i.loli.net/2020/07/04/aRNObCdX2sBvAxh.jpg",width:"90%",height:"60%",alt:"convolutions"}})])],1)]),t._v(" "),e("p",[t._v("代码中的 “yyyy-MM-dd HH:mm:ss” 为预定义字符串， yyyy 表示四位年， MM 表示两位月份， dd 表示两位日期， HH 表示小时(使用24小时制)， mm 表示分钟， ss 表示秒，这样就指定了转换的目标格式，最后调用 format() 方法将时间转换为指定的格式的字符串。")]),t._v(" "),e("ol",[e("li",[t._v("使用 parse() 方法将文本转换为日期\n"),e("center",[e("img",{attrs:{src:"https://i.loli.net/2020/07/04/2PgtTBvSi7HjWzJ.jpg",width:"90%",height:"60%",alt:"convolutions"}})])],1)]),t._v(" "),e("p",[t._v("代码中的 “yyyy年MM月dd日 HH:mm:ss” 指定了字符串的日期格式，调用 parse() 方法将文本转换为日期。")]),t._v(" "),e("ul",[e("li",[t._v("注意：调用 SimpleDateFormat 对象的 parse() 方法时可能会出现转换异常，即 ParseException ，因此需要进行异常处理；使用 Date 类时需要导入 java.util 包，使用 SimpleDateFormat 时需要导入 java.text 包")])]),t._v(" "),e("h2",{attrs:{id:"_5-calendar类的应用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-calendar类的应用"}},[t._v("#")]),t._v(" 5. Calendar类的应用")]),t._v(" "),e("ul",[e("li",[t._v("Date 类最主要的作用就是获得当前时间，同时这个类里面也具有设置时间以及一些其他的功能，但是由于本身设计的问题，这些方法却遭到众多批评，不建议使用，更推荐使用 Calendar 类进行时间和日期的处理。")]),t._v(" "),e("li",[t._v("java.util.Calendar 类是一个抽象类，可以通过调用 getInstance() 静态方法获取一个 Calendar 对象，此对象已由当前日期时间初始化，即默认代表当前时间，如 Calendar c = Calendar.getInstance();")])]),t._v(" "),e("center",[e("img",{attrs:{src:"https://i.loli.net/2020/07/04/NI7GqigoxRSmQ9W.jpg",width:"90%",height:"60%",alt:"convolutions"}})]),t._v(" "),e("p",[t._v("其中，调用 Calendar 类的 getInstance() 方法获取一个实例，然后通过调用 get() 方法获取日期时间信息，参数为需要获得的字段的值， Calendar.Year 等为 Calendar 类中定义的静态常量。")]),t._v(" "),e("center",[e("img",{attrs:{src:"https://i.loli.net/2020/07/04/E2guShJ4ZGzCdFj.jpg",width:"90%",height:"60%",alt:"convolutions"}})]),t._v(" "),e("p",[t._v("Calendar 类提供了 getTime() 方法，用来获取 Date 对象，完成 Calendar 和 Date 的转换，还可通过 getTimeInMillis() 方法，获取此 Calendar 的时间值，以毫秒为单位。")]),t._v(" "),e("h2",{attrs:{id:"_6-使用math类操作数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-使用math类操作数据"}},[t._v("#")]),t._v(" 6. 使用Math类操作数据")]),t._v(" "),e("ul",[e("li",[t._v("Math 类位于 java.lang 包中，包含用于执行基本数学运算的方法， Math 类的所有方法都是静态方法，所以使用该类中的方法时，可以直接使用类名.方法名，如： Math.round();\n"),e("center",[e("img",{attrs:{src:"https://i.loli.net/2020/07/04/t8aPCnbmUdD92p3.jpg",width:"90%",height:"40%",alt:"convolutions"}})])],1)]),t._v(" "),e("p",[t._v("实例：")]),t._v(" "),e("center",[e("img",{attrs:{src:"https://i.loli.net/2020/07/04/Xv52AO6fGDYPkoa.jpg",width:"90%",height:"40%",alt:"convolutions"}})])],1)}),[],!1,null,null,null);a.default=i.exports}}]);